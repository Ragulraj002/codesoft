import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.preprocessing import StandardScaler
import numpy as np

# Sample credit card transaction data (replace with your dataset)
# In a real scenario, this would be loaded from a CSV or database
data = {
    'Amount': [100, 50, 200, 75, 300, 500, 25, 120, 80, 400],
    'Time': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'Feature1': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],
    'Feature2': [1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1],
    'IsFraud': [0, 0, 0, 0, 0, 1, 0, 0, 0, 1]  # 0: Genuine, 1: Fraudulent
}

df = pd.DataFrame(data)

# Preprocessing
# Scale the 'Amount' and 'Time' features
scaler = StandardScaler()
df['Amount'] = scaler.fit_transform(df[['Amount']])
df['Time'] = scaler.fit_transform(df[['Time']])

# Features and target
features = ['Amount', 'Time', 'Feature1', 'Feature2']
target = 'IsFraud'

# Split data
X_train, X_val, y_train, y_val = train_test_split(df[features], df[target], test_size=0.2, random_state=42)

# Model training
model = LogisticRegression(random_state=42)
model.fit(X_train, y_train)

# Prediction
y_pred = model.predict(X_val)

# Evaluation
accuracy = accuracy_score(y_val, y_pred)
print(f'Accuracy: {accuracy:.2f}')

print(classification_report(y_val, y_pred))
print(confusion_matrix(y_val, y_pred))
